generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  username    String  @unique
  firstName   String
  lastName    String
  email       String  @unique
  password    String // Password will be hashed
  description String?
  avatarUrl   String?
  bannerUrl   String?
  isVerified  Boolean @default(false)

  // Relations
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String?

  // Posts et contenus
  posts         RegularPost[]
  notifications Notification[]
  sentMessages  Message[]      @relation("SenderMessages")
  feeds         Feed[] // Link to the new Feed table

  // Système de follow
  followedBy Follow[] @relation("Follower")
  following  Follow[] @relation("Following")

  // Follow teams
  teamFollows TeamFollow[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]

  conversationsAsUser1 Conversation[] @relation("User1")
  conversationsAsUser2 Conversation[] @relation("User2")
}

model Team {
  id           String  @id @default(uuid())
  teamname     String  @unique
  ceoFirstName String
  ceoLastName  String
  email        String  @unique
  password     String
  description  String?
  rosterList   Json?
  teamColor    String
  logoUrl      String?
  isVerified   Boolean @default(false)
  bannerUrl    String?

  // Relations
  members    User[]
  offerPosts OfferPost[]

  // Followers
  followers TeamFollow[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Conversation Conversation[]
}

// Relation many-to-many entre utilisateurs (follow)
model Follow {
  id String @id @default(uuid())

  follower   User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId String

  followed   User   @relation("Follower", fields: [followedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedId String

  createdAt DateTime @default(now())

  @@unique([followerId, followedId])
}

// Relation many-to-many entre utilisateurs et équipes
model TeamFollow {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String

  createdAt DateTime @default(now())

  @@unique([userId, teamId])
}

model RegularPost {
  id          String @id @default(uuid())
  title       String
  description String @db.Text

  imageList   Json?
  likes       Int   @default(0)
  likesList   Json?
  reposts     Int   @default(0)
  repostsList Json?
  comments    Json?

  poster   User   @relation(fields: [posterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  posterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Feed      Feed[] // Link to the new Feed table
}

model OfferPost {
  id               String @id @default(uuid())
  title            String
  description      String
  imageList        Json?
  applyingUserList Json?

  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId String

  messages Message[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  Feed      Feed[] // Link to the new Feed table
}

model Conversation {
  id String @id @default(uuid())

  // Soit une conversation User <-> User
  user1Id String?
  user2Id String?
  user1   User?   @relation("User1", fields: [user1Id], references: [id])
  user2   User?   @relation("User2", fields: [user2Id], references: [id])

  // Soit une conversation User <-> Team
  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id])

  lastMessage   Message? @relation(fields: [lastMessageid], references: [id])
  lastMessageid String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Message {
  id             String @id @default(uuid())
  content        String
  senderId       String
  conversationId String

  sender User @relation("SenderMessages", fields: [senderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  OfferPost   OfferPost? @relation(fields: [offerPostId], references: [id])
  offerPostId String?

  Conversation Conversation[]
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  offerPostId String
  offerPost   OfferPost @relation(fields: [offerPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Notification {
  id               String @id @default(uuid())
  notificationType String

  receiver   User   @relation(fields: [receiverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiverId String

  createdAt DateTime @default(now())
}

model FastSearching {
  id           String  @id @default(uuid())
  swiperId     String?
  acceptedList Json?
  refusedList  Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id       String @id @default(uuid())
  gameName String @unique
  gameLogo String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feed {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  regularPostId String?
  regularPost   RegularPost? @relation(fields: [regularPostId], references: [id], onDelete: Cascade)
  offerPostId   String?
  offerPost     OfferPost?   @relation(fields: [offerPostId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())

  // To ensure that a feed entry is unique for a user and a specific post
  @@unique([userId, regularPostId, offerPostId])
  // This allows for a quick lookup of a user's feed, ordered by creation time
  @@index([userId, createdAt(sort: Desc)])
}
